generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                String           @id @default(uuid())
  email             String           @unique
  password          String
  name              String
  avatar            String?
  role              Role             @default(USER)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  isVerify          Boolean          @default(false)
  verificationToken String?          @unique

  // Relations
  profile           Profile?
  certificates      Certificate[]
  applications      JobApplication[]
  educations        Education[]
  experiences       Experience[]
}

model Profile {
  id        String  @id @default(uuid())
  userId    String  @unique
  bio       String?
  phone     String?
  address   String?
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certificate {
  id        String   @id @default(uuid())
  userId    String
  title     String
  issuer    String
  issuedAt  DateTime
  fileUrl   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(uuid())
  userId      String
  degree      String   // Contoh: S1, D3, SMA
  institution String   // Nama sekolah atau universitas
  major       String?  // Jurusan
  yearStart   Int?
  yearEnd     Int?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id               String   @id @default(uuid())
  userId           String
  companyName      String
  position         String
  startDate        DateTime
  endDate          DateTime?
  description      String?
  reasonForLeaving String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id            String           @id @default(uuid())
  title         String
  description   String
  requirements  String
  location      String
  postedAt      DateTime         @default(now())
  applications  JobApplication[]
}

model JobApplication {
  id        String   @id @default(uuid())
  userId    String
  jobId     String
  appliedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
}
